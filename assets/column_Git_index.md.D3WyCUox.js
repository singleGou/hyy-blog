import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.CLzmwTRU.js";const l="/hyy-blog/assets/windows%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95.BDKgvf2X.png",p="/hyy-blog/assets/git-init.BA8LoKtD.png",h="/hyy-blog/assets/git%E9%9A%90%E8%97%8F%E4%BB%93%E5%BA%93.CUYMrmGS.png",e="/hyy-blog/assets/add-file.BNMzuNHC.png",k="/hyy-blog/assets/git-status.r8DUeRA8.png",d="/hyy-blog/assets/git-diff.CTItYZPR.png",g="/hyy-blog/assets/git-status2.CD5GtN5H.png",r="/hyy-blog/assets/git-status3.jrrez03H.png",o="/hyy-blog/assets/git-log.D2XVgXU7.png",c="/hyy-blog/assets/git-log2.Cuz8KurV.png",F="/hyy-blog/assets/git-reset.DUJy0gi9.png",y="/hyy-blog/assets/git-log3.C4NFAIz5.png",b="/hyy-blog/assets/git-reset2.DJpVSNMK.png",E="/hyy-blog/assets/git-reflog.CHJhclHT.png",C="/hyy-blog/assets/git-checkout.DMwafo-Q.png",u="/hyy-blog/assets/git-status-add.CgskDzst.png",m="/hyy-blog/assets/ssh-keygen.C2bE19zj.png",B="/hyy-blog/assets/ssh.Bm9CrUzC.png",D="/hyy-blog/assets/ssh-key.C4TFOHBk.png",A="/hyy-blog/assets/add-ssh-key.DEra2xuV.png",v="/hyy-blog/assets/github-create.yfzZtl9i.png",_="/hyy-blog/assets/github-create2.Bfie7vVF.png",f="/hyy-blog/assets/git-push.ZNkZh4Dd.png",x="/hyy-blog/assets/branch.wi3eaqDK.png",V=JSON.parse('{"title":"Git 基础","description":"","frontmatter":{},"headers":[],"relativePath":"column/Git/index.md","filePath":"column/Git/index.md"}'),q={name:"column/Git/index.md"};function S(G,s,H,P,w,N){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="git-基础" tabindex="-1">Git 基础 <a class="header-anchor" href="#git-基础" aria-label="Permalink to &quot;Git 基础&quot;">​</a></h1><p>Git 是目前世界上最先进的<strong>分布式</strong>版本控制系统，版本控制系统的好处在于可以帮我们<strong>自动</strong>管理文件的每次改动</p><p>相比于传统<strong>集中式</strong>版本控制系统如 SVN，有如下优势：</p><ul><li>不需要联网，每个人电脑上都有一个完整的版本库</li><li>强大的分支管理</li><li>......</li></ul><h2 id="安装-git" tabindex="-1">安装 Git <a class="header-anchor" href="#安装-git" aria-label="Permalink to &quot;安装 Git&quot;">​</a></h2><p>linux、macOS 以及 windows 系统都可以使用相应的包管理器进行安装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># linux</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># macOS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># windows 这里推荐使用 Scoop 包管理器（需要先安装 Scoop)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scoop</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git</span></span></code></pre></div><p>另外，windows 也可以直接去 [git 官网](<a href="https://git-scm.com/downloads/win" target="_blank" rel="noreferrer">Git - Downloading Package</a>)下载安装程序，安装步骤就是无脑下一步</p><p>以 windows 系统为例，安装完成之后右键菜单会出现以下两个选项：</p><p><img src="`+l+`" alt=""></p><p>一般只使用 <code>Open Git Bash here</code> 在指定目录下去执行 git 指令就可以了</p><h2 id="创建版本库" tabindex="-1">创建版本库 <a class="header-anchor" href="#创建版本库" aria-label="Permalink to &quot;创建版本库&quot;">​</a></h2><p>版本库又叫仓库（Repository），可以简单的理解为一个目录，里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以进行追踪或回溯</p><p>这里使用命令行新建一个目录并切换到该目录下：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> learn-git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> learn-git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pwd</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/d/hyy/code/learn-git</span></span></code></pre></div><p>使用 <code>git init</code> 把该目录变成 git 可以管理的仓库：</p><p><img src="`+p+'" alt=""></p><p>git 仓库嗖的一下就建好了，此时可以看到当前目录下多了一个 <code>.git</code> 目录，里面是 git 用来管理版本库的，没事不要乱动，这个目录默认是隐藏的：</p><p><img src="'+h+`" alt=""></p><p>也可以使用 <code>ls -ah</code> 命令查看隐藏的项目</p><h3 id="工作区和暂存区" tabindex="-1">工作区和暂存区 <a class="header-anchor" href="#工作区和暂存区" aria-label="Permalink to &quot;工作区和暂存区&quot;">​</a></h3><p>Git 和 SVN 等不同的是有一个暂存区的概念</p><p><strong>工作区（Working Directory）</strong>：</p><p>在电脑里能看到的目录</p><p><strong>版本库（Repository）</strong>：</p><p>工作区有一个隐藏目录 <code>.git</code> ，里面存放的就是 Git 的版本库，里面存了很多东西，其中最重要的就是称为 stage（或者叫 index）的暂存区，还有 Git 为我们自动创建的第一个分支 master，以及指向 master 的一个指针叫 HEAD</p><h3 id="将文件添加到版本库" tabindex="-1">将文件添加到版本库 <a class="header-anchor" href="#将文件添加到版本库" aria-label="Permalink to &quot;将文件添加到版本库&quot;">​</a></h3><p>在创建完仓库后，新建两个文件 <code>file1.md</code> 和 <code>file2.md</code>，只需要两步就能把他们放到 git 仓库：</p><ul><li>使用命令 <code>git add &lt;file&gt;</code>，可反复多次使用，添加多个文件</li><li>使用命令 <code>git commit -m &lt;message&gt;</code>，其中 message 是必填项表示此次提交的信息</li></ul><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把文件添加到仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file1.md</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file2.md</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 把文件提交到仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;commit message&#39;</span></span></code></pre></div><p><img src="`+e+'" alt=""></p><p>刚刚添加并提交了两个文件，这时候来改一下文件中的内容，然后使用 <code>git status</code> 命令<strong>查看当前仓库的状态</strong>：</p><p><img src="'+k+'" alt=""></p><p>输出的信息意思是：<code>file1.md</code> 文件被修改过了，但是没有被添加到 git 仓库中</p><blockquote><p><code>git add</code> 实际上是把文件添加到暂存区</p><p><code>git commit</code> 实际上是把暂存区的所有内容提交到当前分支</p></blockquote><h3 id="查看修改的内容" tabindex="-1">查看修改的内容 <a class="header-anchor" href="#查看修改的内容" aria-label="Permalink to &quot;查看修改的内容&quot;">​</a></h3><p>使用 <code>git diff</code> 命令查看具体修改的内容：</p><p><img src="'+d+'" alt=""></p><p>可以看到文件第一行添加了一句话，使用的格式是 Unix 通用的 diff 格式</p><p>使用 <code>git add</code> 命令将 <code>file1.md</code> 添加到仓库后，然后再使用 <code>git status</code> 命令查看当前状态：</p><p><img src="'+g+'" alt=""></p><p>输出的信息意思是：要被提交的修改包括 <code>file1.md</code>，下一步就可以放心地提交了</p><p>使用 <code>git commit</code> 提交后查看当前状态：</p><p><img src="'+r+`" alt=""></p><p>输出信息表示当前没有需要提交的修改，工作目录是干净（working tree clean）的</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看具体修改了什么内容，后面可以跟具体的文件，一般在 git add 前查看</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 当前版本的指定文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h3 id="管理修改" tabindex="-1">管理修改 <a class="header-anchor" href="#管理修改" aria-label="Permalink to &quot;管理修改&quot;">​</a></h3><p>git 优秀的地方之一在于它管理的是修改而不是文件</p><p>每次修改，如果不用 <code>git add</code> 到暂存区，那就不会加入到 <code>commit</code> 中</p><h2 id="版本回退" tabindex="-1">版本回退 <a class="header-anchor" href="#版本回退" aria-label="Permalink to &quot;版本回退&quot;">​</a></h2><p>假设你对文件进行了多次修改，然后不停地提交到 git 仓库中，那怎么知道每次改了什么呢，我不可能记得的呀</p><p>这时就可以使用 <code>git log</code> 命令查看提交历史，显示从最近到最远的提交日志：</p><p><img src="`+o+'" alt=""></p><p>可以看到我提交了三次，还可以使用 <code>git log --pretty=online</code> 在一行内打印每次提交的信息：</p><p><img src="'+c+'" alt=""></p><p>在每行开头的一大坨字符串是 <code>commit id</code>（版本号），由 <code>SHA1</code> 算法计算出来的十六进制数字</p><blockquote><p>为什么 git 不像 svn 那样使用 1，2，3 这种简单的递增数字作为版本号，因为 git 是分布式的，可以多人在同一个版本库里工作，如果使用 1，2，3 这种肯定就冲突了</p></blockquote><p>接下来进入重头戏：时光穿梭！我想把 <code>file1.md</code> 文件回退到上一个版本，该怎么做？</p><p>在 git 中使用 <code>HEAD</code> 表示当前版本，上一个版本是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code>，上 100 个版本 <code>HEAD~100</code></p><p>使用 <code>git reset</code>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span></span></code></pre></div><p>这里可以指定可选参数，一般使用 <code>--hard</code> 就行</p><ul><li><code>--hard</code> 会回退到上个版本的已提交状态-</li><li><code>--soft</code> 会回退到上个版本的未提交状态</li><li><code>--mixed</code> 会回退到上个版本已添加但未提交的状态</li></ul><p><img src="'+F+'" alt=""></p><p>此时文件被回退到上一个版本，使用 <code>git log</code> 查看一下：</p><p><img src="'+y+'" alt=""></p><p>天塌了！最新提交的版本不见了！怎么办？</p><p>只要命令行还没关，找到之前最新的 <code>commit id</code>，我这儿是 <code>93ce171...</code> 开头的，就可以指定回到“未来的”那个版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 93ce171</span></span></code></pre></div><blockquote><p><code>commit id</code> 只需要输入前几位就可以了，git 会自动去匹配，当然也不要太短</p></blockquote><p><img src="'+b+'" alt=""></p><p>可以看到回退到了未来的最新版本，我胡汉三又回来了！</p><blockquote><p>git 的版本回退速度非常快，因为 git 只是移动内部的 <strong>HEAD 指针</strong>，顺便把工作区的文件更新了，所以 HEAD 指针指向哪里，版本就是哪个</p></blockquote><p>众所周知，人总是喜欢反复无常，比如某一天下班我回退了版本后为了给公司省电把电脑关机了，第二天那个斜眼经理又让我恢复到昨天的版本。。。世上没有后悔药，但 git 有！</p><p>使用 <code>git reflog</code> 命令查看所有分支和 HEAD 的变动历史（包括提交、重置、合并等操作）：</p><p><img src="'+E+'" alt=""></p><h2 id="撤销修改" tabindex="-1">撤销修改 <a class="header-anchor" href="#撤销修改" aria-label="Permalink to &quot;撤销修改&quot;">​</a></h2><p>假设你有一次不小心往文件中添加了一串这样的文字：</p><div class="language-plain vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plain</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>My shabby company is still using SVN.</span></span></code></pre></div><p>还好你及时醒悟，选择删掉这段文字，查看一下当前状态：</p><p><img src="'+C+`" alt=""></p><p>可以看到 git 提示你可以使用 <code>git restore &lt;file&gt;</code> 命令忽略更改（旧版 git 使用的是 <code>git checkout -- &lt;file&gt;</code>)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 旧版 git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新版 git</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>假设你之前糊涂把之前那段话添加到了暂存区（执行了 <code>git add</code> 操作），现在想回头怎么办？还是先看一下状态：</p><p><img src="`+u+`" alt=""></p><p>git 提示你可以使用 <code>git restore --staged &lt;file&gt;</code> 命令把暂存区的修改撤销掉（unstage）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git 旧语法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># git 新语法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --staged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>如果你把那句话提交到了版本库（执行了 <code>git commit</code>）命令，可以使用之前版本回退功能，但是你要是推送到了公司的远程仓库，那就真的没救了</p><p>总结一下：</p><p>撤销修改分为两种情况，一种是没有添加到暂存区，撤销修改就是恢复到和版本库一样的状态：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>一种是已经添加到了暂存区，把暂存区的修改撤销掉（unstage），重新放回工作区：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restore</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --staged</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><blockquote><p>git reset 命令既可以回退版本，也可以把暂存区的修改回退到工作区</p></blockquote><h2 id="远程仓库" tabindex="-1">远程仓库 <a class="header-anchor" href="#远程仓库" aria-label="Permalink to &quot;远程仓库&quot;">​</a></h2><p>远程仓库可以理解为一台运行 Git 的服务器，可以自己搭建，不过现在还没有必要，好在有 GitHub 这种提供 Git 仓库托管服务的网站（Gitee、GitLab 等类似）</p><p>本地 Git 仓库和 GitHub 仓库之间的传输是通过 SSH 加密的，所以需要配置一些东西</p><h3 id="配置用户名和邮箱" tabindex="-1">配置用户名和邮箱 <a class="header-anchor" href="#配置用户名和邮箱" aria-label="Permalink to &quot;配置用户名和邮箱&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 全局配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> –-global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yourname</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> –-global</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user.email</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youremail@example.com</span></span></code></pre></div><h3 id="创建-ssh-key" tabindex="-1">创建 SSH Key <a class="header-anchor" href="#创建-ssh-key" aria-label="Permalink to &quot;创建 SSH Key&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ssh-keygen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> youremail@example.com</span></span></code></pre></div><p><img src="`+m+'" alt=""></p><p>一直回车就行，完事会生成两个文件，在一个包含 <code>.ssh</code> 目录中去找一找,，这里给你看一下我存放的位置：</p><p><img src="'+B+'" alt=""></p><p><code>id_rsa</code> 是私钥，不能泄露出去，<code>id_rsa.pub</code> 是公钥，需要到 Github 上配置一下：</p><p><img src="'+D+'" alt=""></p><p>点击 <code>New SSH key</code> ，起一个 Title，把之前生成的 <code>id_rsa.pub</code> 文件中的内容拷进来点击添加就可以了：</p><p><img src="'+A+'" alt=""></p><blockquote><p>为什么 GitHub 需要 SSH Key 呢？因为 GitHub 需要识别出你推送的提交确实是你推送的</p></blockquote><h3 id="添加远程仓库" tabindex="-1">添加远程仓库 <a class="header-anchor" href="#添加远程仓库" aria-label="Permalink to &quot;添加远程仓库&quot;">​</a></h3><p>在 github 上新建一个远程仓库：</p><p><img src="'+v+'" alt=""></p><p>创建完成之后可以看到 github 给出的提示：</p><p><img src="'+_+'" alt=""></p><p>提示我们在本地新建一个仓库或者将本地已有仓库与之关联，可以看到他这里还多一个 <code>git branch -M main</code> 的命令，意思是把默认的 <code>master</code> 分支改个名字叫 <code>main</code>，至于为什么要这么做，有国外的政治正确在里面，这里就不细嗦了，你可能会长大嘴巴啊：国外不是都很 open 吗，我只能说国外（没错就是 US）的言论自由也不是很 free</p><p>言归正传，我们在一个<strong>包含 git 版本库的目录</strong>中（可别整岔了）输入命令添加远程仓库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:xxx/test.git</span></span></code></pre></div><p>这里的 origin 就是远程仓库的名字，这是 git 默认的叫法，将这个 <code>git@github.com:xxx/test.git</code> 改成你自己的，下一步就可以把本地的版本库都提交到上面：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span></span></code></pre></div><p>如果碰到下面这种情况了，说明你之前<strong>创建 SSH Key</strong> 的工作没有做到位，自己再检查一些吧</p><p><img src="'+f+`" alt=""></p><h3 id="克隆远程仓库" tabindex="-1">克隆远程仓库 <a class="header-anchor" href="#克隆远程仓库" aria-label="Permalink to &quot;克隆远程仓库&quot;">​</a></h3><p>使用 <code>git clone</code> 命令将远程仓库克隆到本地：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone git@github.com:xxx/test.git</span></span></code></pre></div><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看分支，指定 -a 参数会查看所有分支（包括远程分支）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 新建分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换分支，指定 -b 参数会顺便切换到创建的分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 切换分支（git 新语法），指定 -c 参数会顺便切换到创建的分支上</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 合并某分支到当前分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><blockquote><p>一般 master 分支会作为主分支，作为稳定版本使用</p><p>开发代码会新建一个 dev 分支在上面工作，测试没问题可以发版了就合并到 master 上面去</p></blockquote><p>标准化的分支管理策略：</p><p><img src="`+x+`" alt=""></p><ul><li>master 分支：主分支</li><li>hotfix 分支：用于解决主分支上的 bug（线上问题紧急修复），从主分支上拉取，解决完了合并到主分支</li><li>release 分支：测试新功能的分支，从 dev 分支上拉取，测试完了合并到 dev 分支和 master 分支</li><li>dev 分支：开发分支，多个人情况下一般不直接在 dev 分支上修改代码，而是创建自己的独立分支</li><li>feature 分支：用于开发新功能，从 dev 分支上拉取，开发完了合并到 dev 分支上去</li></ul><h3 id="多人协作" tabindex="-1">多人协作 <a class="header-anchor" href="#多人协作" aria-label="Permalink to &quot;多人协作&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看远程库信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在推送前最好先拉取一下远程分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 在本地创建和远程分支对应的分支，名称最好一样</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 建立本地分支和远程分支的关联</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-upstream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>建立本地分支和远程分支的关联后，就可以直接使用 <code>git pull</code> 和 <code>git push</code> 去拉取和提交代码了</p><p>如果使用 git pull 有冲突，要先解决冲突</p><blockquote><p>本地新建的分支如果不推送到远程，对其他人就是不可见的</p></blockquote><h2 id="标签管理" tabindex="-1">标签管理 <a class="header-anchor" href="#标签管理" aria-label="Permalink to &quot;标签管理&quot;">​</a></h2><p>发版的时候一般会打标签，标签是版本库的一个快照，其实就是指向某个 commit 的指针，但是和分支不同的是，标签不能移动</p><blockquote><p>Git 有 commit 为什么还要引入 tag ？</p><p>其实就是 commit_id 太长了不好记，相当于 IP 地址跟域名一样</p></blockquote><h3 id="创建标签" tabindex="-1">创建标签 <a class="header-anchor" href="#创建标签" aria-label="Permalink to &quot;创建标签&quot;">​</a></h3><p>先切换到需要打标签的分支（一般是 master 分支），使用 <code>git tag &lt;name&gt;</code> 就可以打一个新标签：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.0</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 默认标签是打在最新提交的 commit 上的，要打在某个 commit 上需要在后面跟 commid_id</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v0.9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看所有标签</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看标签信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建带有说明的标签，用-a 指定标签名，-m 指定说明文字：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;version 1.1 released&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">commit_i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 推送某个标签到远程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 一次性推送全部尚未推送到远程的本地标签</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tags</span></span></code></pre></div><blockquote><p>标签不是按时间顺序列出，而是按字母排序的</p></blockquote><p>如果标签已经推送到远程，要先从本地删除，再从从远程删除：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :refs/tags/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>基于标签创建新分支并切换到该分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">new_branch_nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">tagnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="忽略文件" tabindex="-1">忽略文件 <a class="header-anchor" href="#忽略文件" aria-label="Permalink to &quot;忽略文件&quot;">​</a></h2><p>在项目根目录可以新建一个 <code>.gitignore</code> 文件用于忽略某些文件的提交</p><p><code>.gitignore</code> 文件核心语法规则：</p><ol><li>基础匹配 <ul><li><code>*.log</code>：忽略所有 <code>.log</code> 文件</li><li><code>/debug.log</code> ：仅忽略根目录下的 <code>debug.log</code></li><li><code>build/</code>：忽略所有名为 <code>build</code> 的目录及其内容</li></ul></li><li>通配符扩展 <ul><li><code>temp?</code>：忽略 <code>temp1</code>、<code>tempa</code>（<code>?</code> 匹配单个字符）</li><li><code>doc/**/cache</code>：忽略所有层级下的 <code>doc/.../cache</code> 目录</li></ul></li><li>反向排除 <ul><li><code>!important.log</code> ：不忽略 <code>important.log</code> （需在忽略规则后声明）</li></ul></li></ol><p>编写示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1. 系统文件（所有项目通用）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.DS_Store</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Thumbs.db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2. 开发环境依赖 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node_modules/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 3. 构建产物</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dist/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.min.js </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 4. 敏感信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.env*.local</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/credentials.json  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 5. 动态文件（如日志）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.log </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">audit.log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 白名单</span></span></code></pre></div>`,152)]))}const K=i(q,[["render",S]]);export{V as __pageData,K as default};
